const { zokou } = require('../framework/zokou');
const { getVerdictByKeyword, updateVerdict } = require('../bdd/origamy_bdd');

// Emojis pour les lieux principaux et sous-lieux
const emojimap = {
    'üèïÔ∏è': 'Forteresse de Lorn',
    'üèπ': 'Avant-poste',
    '‚öíÔ∏è': 'Forge Secr√®te',
    '‚õ©Ô∏è': 'Sanctuaire du Dragon',
    'üêâ': 'Caveau du Dragon',
    'üõï': 'Autel des Anciens',
    'üóª': 'Lac d\'Argent',
    'üíß': 'Bassin des Profondeurs',
    'üèùÔ∏è': '√éle Mystique',
    'üè≠': 'Forteresse de Cendre',
    'üåã': 'Volcan de Mirathos',
    'ü™®': 'Tunnel Magmatique',
    'üèûÔ∏è': 'Rivi√®re des Larmes',
    '‚öì': 'Port des Ombres',
    'üè∞': 'Ch√¢teau de Verelys',
    'üëë': 'Salle du Tr√¥ne',
    'üå≥': 'R√©serve des Ch√™nes',
    'üå±': 'Clairi√®re des Anciens',
    'üåº': 'Jardins des Druides',
    '‚õ∞Ô∏è': 'Monts C√©rul√©ens',
    'üíé': 'Grotte des Gemmes',
    'üå¨Ô∏è': 'Sommet des Brumes',
    'üåÑ': 'Vall√©e des Anciens',
    'üèõÔ∏è': 'Ruines du Temple',
    'üî±': 'Autel des Anc√™tres',
    'üèòÔ∏è': 'Village de Durnhelm',
    'üõñ': 'Auberge du Ch√™ne Vert',
    'üõ†Ô∏è': 'Atelier des Forgerons',
    'üó°Ô∏è': 'Grotte de la Vip√®re',
    'üêç': 'Niche du Serpent',
    'üí∞': 'Chambre des Tr√©sors Cach√©s',
    'üåâ': 'Pont de Faladon',
    'üß±': 'Barri√®re Sud',
    'üåä': 'Rives du Pont',
    'üåæ': 'Champs de Meridia',
    'üöú': 'Ferme de Miril',
    'üèöÔ∏è': 'Grange Abandonn√©e',
    'üå≤': 'For√™t Nocturne',
    'üçÉ': 'Clairi√®re de la Lune',
    'üé™': 'Cabane du Sorcier'
};

// Suffixes pour les sous-lieux et √©v√©nements
const eventEmojis = {
    '‚ÑπÔ∏è': 'Event',
    '‚¨áÔ∏è': 'Sud',
    '‚¨ÜÔ∏è': 'Nord',
    '‚û°Ô∏è': 'Est',
    '‚¨ÖÔ∏è': 'Ouest',
    'üßë‚Äçüç≥': 'Comptoir',
    'ü™ë': 'Place',
    '1Ô∏è‚É£': 'Chambre 1',
    '2Ô∏è‚É£': 'Chambre 2',
    '3Ô∏è‚É£': 'Chambre 3'
};

// Fonction pour g√©n√©rer la carte compl√®te des emojis avec leurs sous-lieux et √©v√©nements
const completeEmojiMap = {};

// Remplir le completeEmojiMap avec les sous-lieux
for (const [emoji, lieu] of Object.entries(emojimap)) {
    completeEmojiMap[emoji] = lieu;

    // Ajout des √©v√©nements et sous-lieux pour chaque lieu
    for (const [eventEmoji, eventName] of Object.entries(eventEmojis)) {
        completeEmojiMap[emoji + eventEmoji] = lieu + ' ' + eventName;
    }
};

zokou(
    {
        nomCom: 'control_regional',
        categorie: 'ORIGAMY'
    }, async (dest, zk, commandeOptions) => {
        const { ms, arg, repondre, superUser } = commandeOptions;

        try {
            const message = arg.join(' ');
            let found = false;

            // Parcours des lieux et des √©v√©nements
            for (const [eventEmoji, eventName] of Object.entries(eventEmojis)) {
                for (const [emoji, lieu] of Object.entries(emojimap)) {
                    // G√©n√©ration dynamique des sous-lieux avec le format `${lieu}_${event}`
                    const subLieuEmoji = emoji + eventEmoji;
                    const subLieuEventKey = `${lieu}_${eventName}`; // cl√© dynamique

                    if (message.includes(subLieuEmoji)) {
                        found = true;

                        // R√©cup√©ration du verdict pour le sous-lieu et l'√©v√©nement sp√©cifique
                        const verdictData = await getVerdictByKeyword(subLieuEventKey); // Utilisation de la cl√© dynamique
                        if (verdictData) {
                            const { verdict, image_url } = verdictData;
                            if (image_url) {
                                // Envoi de l'image avec le verdict en l√©gende
                                await zk.sendMessage(dest, { image: { url: image_url }, caption: verdict }, { quoted: ms });
                            } else {
                                repondre(verdict);
                            }
                        } else {
                            // Si aucun verdict n'est trouv√© pour ce sous-lieu
                            repondre(`\`ùó¢ùó•ùóúùóöùóîùó†ùó¨ ùó™ùó¢ùó•ùóüùóó\`\n\n> Aucun verdict trouv√© pour '${lieu}'.\n\n*NEXT...*`);
                        }
                        return; // On sort de la fonction apr√®s avoir trouv√© un sous-lieu
                    }
                }
            }

            // Si aucun sous-lieu n'est trouv√©, v√©rifie les lieux principaux
            for (const [emoji, lieu] of Object.entries(emojimap)) {
                if (message.includes(emoji)) {
                    found = true;

                    // R√©cup√©ration du verdict pour ce lieu principal
                    const verdictData = await getVerdictByKeyword(lieu);
                    if (verdictData) {
                        const { verdict, image_url } = verdictData;
                        if (image_url) {
                            // Envoi de l'image avec le verdict en l√©gende
                            await zk.sendMessage(dest, { image: { url: image_url }, caption: verdict }, { quoted: ms });
                        } else {
                            repondre(verdict);
                        }
                    } else {
                        // Si aucun verdict n'est trouv√© pour ce lieu principal
                        repondre(`\`ùó¢ùó•ùóúùóöùóîùó†ùó¨ ùó™ùó¢ùó•ùóüùóó\`\n\n> Aucun verdict trouv√© pour '${lieu}'.\n\n*NEXT...*`);
                    }
                    break; // On sort de la boucle apr√®s avoir trouv√© un lieu principal
                }
            }

            if (!found) {
                // Si aucun emoji correspondant n'a √©t√© trouv√©
                repondre("\`ùó¢ùó•ùóúùóöùóîùó†ùó¨ ùó™ùó¢ùó•ùóüùóó\`\n\n> Rien √† signaler.\n\n*NEXT...*");
            }

        } catch (error) {
            // Gestion des erreurs avec informations d√©taill√©es sur le lieu et l'emoji
            console.error(`Erreur lors du traitement du lieu avec l'emoji correspondant: ` + error);
            repondre("Une erreur est survenue. Veuillez r√©essayer.");
        }
    }
);