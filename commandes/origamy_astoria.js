const { zokou } = require('../framework/zokou');
const { getVerdictByKeyword, updateVerdict } = require('../bdd/origamy_bdd');

// Emojis de base pour les lieux principaux
const emojimap = {
    '‚õ©Ô∏è': 'Porte Principale',
    'üõû': 'Transport Public',
    'ü™¶': 'Cimeti√®re',
    'üå≤': 'Bois Sacr√©s',
    'üèüÔ∏è': 'Colis√©e d\'Aurelius',
    'üï≥Ô∏è': 'Ar√®ne Souterraine',
    'üèõÔ∏è': 'Centre de Commandement',
    'üèπ': 'Camp d\'Entra√Ænement',
    'üéì': 'Acad√©mie d\'Arcana',
    'üè¢': 'Caserne de la Garde',
    'üõçÔ∏è': 'March√© Central',
    'üçª': 'Luxury Taverne',
    'ü•ñ': 'Baguette Dor√©e',
    '‚öíÔ∏è': 'Forge d\'Edward',
    'üéé': 'Grand Bazar',
    'üè§': 'Bureau des Missions',
    'üè¶': 'Salle des Tr√©sors',
    'ü´ß': 'Bains Public',
    'üè¨': 'Galerie des Arts',
    'üìö': 'Grande Biblioth√®que',
    'üè•': 'Centre M√©dical',
    '‚öóÔ∏è': 'Laboratoire d\'Oris',
    'üèòÔ∏è': 'Quartier R√©sidentiel',
    'üéÆ': 'Salle des Jeux',
    'üõÄ': 'Bains Royaux',
    'üè°': 'R√©sidences Nobles',
    '‚õ≤': 'Cour d\'Honneur',
    'üè∞': 'Palais Royal',
    'üëë': 'Salle du Tr√¥ne',
    'üèØ': 'Hall des Gardiens',
    '‚ö±Ô∏è': 'Oubliettes',
    'üêé': '√âcuries Royales',
    'üî≠': 'Tour Astral',
    'üó°Ô∏è': 'Arsenal Royaux',
    'üó∫Ô∏è': 'Carte Astoria'
};

// Suffixes pour les sous-lieux et √©v√©nements
const eventEmojis = {
    '‚ÑπÔ∏è': 'Event',
    '‚¨áÔ∏è': 'Sud',
    '‚¨ÜÔ∏è': 'Nord',
    '‚û°Ô∏è': 'Est',
    '‚¨ÖÔ∏è': 'Ouest',
    'üßë‚Äçüç≥': 'Comptoir',
    'ü™ë': 'Place',
    '1Ô∏è‚É£': 'Chambre 1',
    '2Ô∏è‚É£': 'Chambre 2',
    '3Ô∏è‚É£': 'Chambre 3'
};

// Fonction pour g√©n√©rer la carte compl√®te des emojis avec leurs sous-lieux et √©v√©nements
const completeEmojiMap = {};

// Remplir le completeEmojiMap avec les sous-lieux
for (const [emoji, lieu] of Object.entries(emojimap)) {
    completeEmojiMap[emoji] = lieu;

    // Ajout des √©v√©nements et sous-lieux pour chaque lieu
    for (const [eventEmoji, eventName] of Object.entries(eventEmojis)) {
        completeEmojiMap[emoji + eventEmoji] = lieu + ' ' + eventName;
    }
};

zokou(
    {
        nomCom: 'control_astoria',
        categorie: 'ORIGAMY'
    }, async (dest, zk, commandeOptions) => {
        const { ms, arg, repondre, superUser } = commandeOptions;

        try {
            const message = arg.join(' ');
            let found = false;

            // Parcours des lieux et des √©v√©nements
            for (const [eventEmoji, eventName] of Object.entries(eventEmojis)) {
                for (const [emoji, lieu] of Object.entries(emojimap)) {
                    // G√©n√©ration dynamique des sous-lieux avec le format `${lieu}_${event}`
                    const subLieuEmoji = emoji + eventEmoji;
                    const subLieuEventKey = `${lieu}_${eventName}`; // cl√© dynamique

                    if (message.includes(subLieuEmoji)) {
                        found = true;

                        // R√©cup√©ration du verdict pour le sous-lieu et l'√©v√©nement sp√©cifique
                        const verdictData = await getVerdictByKeyword(subLieuEventKey); // Utilisation de la cl√© dynamique
                        if (verdictData) {
                            const { verdict, image_url } = verdictData;
                            if (image_url) {
                                // Envoi de l'image avec le verdict en l√©gende
                                await zk.sendMessage(dest, { image: { url: image_url }, caption: verdict }, { quoted: ms });
                            } else {
                                repondre(verdict);
                            }
                        } else {
                            // Si aucun verdict n'est trouv√© pour ce sous-lieu
                            repondre(`\`ùó¢ùó•ùóúùóöùóîùó†ùó¨ ùó™ùó¢ùó•ùóüùóó\`\n\n> Aucun verdict trouv√© pour '${lieu}'.\n\n*NEXT...*`);
                        }
                        return; // On sort de la fonction apr√®s avoir trouv√© un sous-lieu
                    }
                }
            }

            // Si aucun sous-lieu n'est trouv√©, v√©rifie les lieux principaux
            for (const [emoji, lieu] of Object.entries(emojimap)) {
                if (message.includes(emoji)) {
                    found = true;

                    // R√©cup√©ration du verdict pour ce lieu principal
                    const verdictData = await getVerdictByKeyword(lieu);
                    if (verdictData) {
                        const { verdict, image_url } = verdictData;
                        if (image_url) {
                            // Envoi de l'image avec le verdict en l√©gende
                            await zk.sendMessage(dest, { image: { url: image_url }, caption: verdict }, { quoted: ms });
                        } else {
                            repondre(verdict);
                        }
                    } else {
                        // Si aucun verdict n'est trouv√© pour ce lieu principal
                        repondre(`\ùó¢ùó•ùóúùóöùóîùó†ùó¨ ùó™ùó¢ùó•ùóüùóó\`\n\n> Aucun verdict trouv√© pour '${lieu}'.\n\n*NEXT...*`);
                    }
                    break; // On sort de la boucle apr√®s avoir trouv√© un lieu principal
                }
            }

            if (!found) {
                // Si aucun emoji correspondant n'a √©t√© trouv√©
                repondre("\`ùó¢ùó•ùóúùóöùóîùó†ùó¨ ùó™ùó¢ùó•ùóüùóó\`\n\n> Rien √† signaler.\n\n*NEXT...*");
            }

        } catch (error) {
            // Gestion des erreurs avec informations d√©taill√©es sur le lieu et l'emoji
            console.error(`Erreur lors du traitement du lieu avec l'emoji correspondant: ` + error);
            repondre("Une erreur est survenue. Veuillez r√©essayer.");
        }
    }
);