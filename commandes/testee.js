const { zokou } = require('../framework/zokou');
const { getPlayerData, updatePlayerData } = require('../bdd/player_bdd'); // Fonctions fictives pour r√©cup√©rer et mettre √† jour les donn√©es du joueur

// Configuration des packs
const packs = {
    bronze: { nom: "ü•â Pack Bronze", prix: 150, gains: 3, rarete: [80, 15, 5, 0] },
    argent: { nom: "ü•à Pack Argent", prix: 200, gains: 4, rarete: [60, 30, 10, 0] },
    or: { nom: "ü•á Pack Or", prix: 250, gains: 5, rarete: [40, 40, 15, 5] },
    special: { nom: "üèÖ Pack Sp√©cial", prix: 300, gains: 6, rarete: [20, 40, 30, 10] }
};

// Objets possibles par raret√©
const objets = {
    commun: ["üé´ Coupons (5-10)", "üß≠ Supremus Tokens (500-1000)", "üíé Gemmes (10-20)", "‚ö° Boost XP (√ó2)"],
    rare: ["üé´ Coupons (10-20)", "üß≠ Supremus Tokens (1000-2500)", "üíé Gemmes (20-50)", "‚è≥ Boost XP (√ó3)", "üéü Ticket de Loterie", "üõí R√©duction Boutique (-10%)"],
    epique: ["üé´ Coupons (20-50)", "üß≠ Supremus Tokens (2500-5000)", "üíé Gemmes (50-100)", "‚è≥ Boost XP (√ó4)", "üîë Cl√© Myst√®re", "üéÅ Box VIP (√ó1)"],
    legendaire: ["üé´ Coupons (50-100)", "üß≠ Supremus Tokens (5000-10000)", "üíé Gemmes (100-250)", "‚è≥ Boost XP (√ó5)", "üí≥ Pass VIP", "üîë Cl√© L√©gendaire"]
};

// Fonction pour choisir un gain al√©atoire en fonction de la raret√©
const choisirGain = (rarete) => {
    const total = rarete.reduce((acc, val) => acc + val, 0);
    const tirage = Math.floor(Math.random() * total);
    let cumul = 0;
    for (let i = 0; i < rarete.length; i++) {
        cumul += rarete[i];
        if (tirage < cumul) return Object.keys(objets)[i];
    }
};

// Fonction pour g√©n√©rer un re√ßu de transaction
const genererRecu = (joueur, pack, gains, cout) => {
    const date = new Date().toLocaleString();
    const recu = `
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
*..........|  SRPN - RE√áU  |..........*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üÜî *Transact ID :* ${Date.now()}
üìå *Type :* üí∞ Achat
üë§ *Exp√©diteur :* ${joueur.nom}
üéØ *Transaction :* Achat de ${pack.nom}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí∞ *D√©tails de la transaction :*
üì¶ *Gain(s) re√ßu(s) :* 
${gains.map(g => `- ${g}`).join('\n')}
üí∏ *Montant d√©bit√© :* ${cout} üé´
üí∞ *Nouveau solde :* ${joueur.solde} üé´
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üïí *Date & Heure :* ${date}
üîÑ *Statut :* Valid√©
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí`;
    return recu;
};

// Commande /acheter
zokou(
    {
        nomCom: 'acheter',
        reaction: 'üí∏',
        categorie: 'TRANSACT'
    },
    async (origineMessage, zk, commandeOptions) => {
        const { repondre, auteurMessage } = commandeOptions;

        try {
            // R√©cup√©ration des donn√©es du joueur
            const joueur = await getPlayerData(auteurMessage);

            if (!joueur) {
                return repondre("Impossible de r√©cup√©rer vos donn√©es de joueur.");
            }

            // Demander le type de pack
            await repondre("Choisissez un type de pack : Bronze, Argent, Or, Sp√©cial.");
            const choixPack = (await zk.awaitForMessage({ sender: auteurMessage })).message.conversation.toLowerCase();

            if (!packs[choixPack]) {
                return repondre("Type de pack invalide.");
            }

            const pack = packs[choixPack];

            // V√©rifier le solde
            if (joueur.solde < pack.prix) {
                return repondre(`Solde insuffisant. Il vous faut ${pack.prix} üé´ pour ce pack.`);
            }

            // G√©n√©rer les gains
            const gains = [];
            for (let i = 0; i < pack.gains; i++) {
                const rarete = choisirGain(pack.rarete);
                const gain = objets[rarete][Math.floor(Math.random() * objets[rarete].length)];
                gains.push(gain);
            }

            // D√©duire le co√ªt et mettre √† jour les donn√©es du joueur
            joueur.solde -= pack.prix;
            await updatePlayerData(auteurMessage, { solde: joueur.solde });

            // G√©n√©rer le re√ßu
            const recu = genererRecu(joueur, pack, gains, pack.prix);
            await repondre(recu);
        } catch (error) {
            console.error("Erreur lors de l'achat :", error);
            await repondre("Une erreur est survenue lors de la transaction.");
        }
    }
);