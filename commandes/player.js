const { zokou } = require('../framework/zokou');
const { addOrUpdateDataInPlayer, getDataFromPlayer } = require('../bdd/player'); // Fonctionnalit√©s pour la base de donn√©es

zokou(
    {
        nomCom: 'player1',  // Peut √™tre dynamique
        categorie: 'Test-Player'
    }, async (dest, zk, commandeOptions) => {

        const { ms, arg, repondre, superUser } = commandeOptions;
        const playerName = 'player1'; // Peut √™tre dynamique en fonction de la commande

        try {
            // R√©cup√©rer les donn√©es actuelles du joueur depuis la base de donn√©es
            const data = await getDataFromPlayer(playerName);

            if (!arg || !arg[0] || arg.join('') === '') {
                // Si aucune commande n'est sp√©cifi√©e, on affiche la fiche du joueur
                if (data) {
                    // Utilisation de valeurs par d√©faut si certaines donn√©es sont manquantes
                    const ficheJoueur = `
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
*..........| SRPN PROFIL |..........*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üë§ ID :* ${data.s1 ?? 'ID inconnu'}  
> *‚ô®Ô∏è Statut :* ${data.s2 ?? 'Statut non d√©fini'}  
> *ü™Ä Mode :* ${data.s3 ?? 'Mode par d√©faut'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*..............| EXPLOITS |.............*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üßò‚Äç‚ôÇÔ∏è Rang :* ${data.s4 ?? '0'}/${data.s5 ?? '0'}/${data.s6 ?? '0'}  
- *ABM :* ${data.s4 ?? 'Aucun'}  
- *SPEED RUSH :* ${data.s5 ?? 'Aucun'}  
- *YU-GI-OH :* ${data.s6 ?? 'Aucun'}  
> *üèÜ Champion :* ${data.s7 ?? 'Aucun'}  
> *üòé Sp√©cialit√© :* ${data.s8 ?? 'Non sp√©cifi√©'}  
> *üëë Leader :* ${data.s9 ?? 'Non sp√©cifi√©'}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.s10 ?? 'Aucun'}  
> *üíØ L√©gende :* ${data.s11 ?? 'Inconnue'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*................| STATS |................*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üëä Battles :* ${data.s12 ?? '0'}  
- *V :* ${data.s13 ?? '0'} | *D :* ${data.s14 ?? '0'} | *L :* ${data.s15 ?? '0'}  
> *üèÖ TOP 3 :* ${data.s16 ?? '0'}  
> *üé≠ Story Mode :*  
- *M.W :* ${data.s17 ?? '0'} / *M.L :* ${data.s18 ?? '0'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*.........| HEROES GAME |.........*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üÄÑ Cards AMB :*  
- ${data.s19 ?? 'Aucune'}  
> *üöó Vehicles :*  
- ${data.s20 ?? 'Aucun'}  
> *üÉè Yu-Gi-Oh :*  
- ${data.s21 ?? 'Aucune carte'}  
> *ü™ê Origamy World :*  
- *üöª Skins :* ${data.s22 ?? 'Aucun'}  
- *üéí Items :* ${data.s23 ?? 'Aucun'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*.............| CURRENCY |............*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üß≠ S Tokens :* ${data.s24 ?? '0'}üß≠  
> *üíé S Gemmes :* ${data.s25 ?? '0'}üíé  
> *üéüÔ∏è Coupons :* ${data.s26 ?? '0'}üéüÔ∏è  
> *üéÅ Box VIP :* ${data.s27 ?? '0'}üéÅ  
> *üìü Compteur :* ${data.s28 ?? '0'}FCFAüí∏  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
...........| *‚ôº Chargement...* |.........`;

                    // Envoyer la fiche du joueur
                    await zk.sendMessage(dest, ficheJoueur, { quoted: ms });
                } else {
                    repondre("üõÉ Aucune fiche trouv√©e pour ce joueur.");
                }
            } else {
                // Si l'utilisateur a fourni des arguments pour mettre √† jour les donn√©es
                if (!superUser) {
                    repondre("üõÇ R√©serv√© aux membres de la *DRPS*");
                } else {
                    // Parser la commande pour obtenir les modifications
                    const updates = arg.join(' ').split(';').reduce((acc, pair) => {
                        const [key, value] = pair.split(':');
                        if (key && value) {
                            acc[key.trim()] = value.trim();
                        }
                        return acc;
                    }, {});

                    // Appliquer les mises √† jour dans la base de donn√©es
                    for (const [key, value] of Object.entries(updates)) {
                        // Ajouter une logique sp√©cifique pour chaque colonne que tu veux mettre √† jour
                        await addOrUpdateDataInPlayer(playerName, key, value);
                    }

                    repondre('‚úîÔ∏è Donn√©es actualis√©es avec succ√®s');
                }
            }
        } catch (error) {
            console.log("Erreur lors du traitement de la commande : " + error);
            repondre("ü•µ Une erreur est survenue lors du traitement de votre commande. Veuillez r√©essayer plus tard.");
        }
    }
);


zokou(
    {
        nomCom: 'player2',  // Peut √™tre dynamique
        categorie: 'Test-Player'
    }, async (dest, zk, commandeOptions) => {

        const { ms, arg, repondre, superUser } = commandeOptions;
        const playerName = 'player2'; // Peut √™tre dynamique en fonction de la commande

        try {
            // R√©cup√©rer les donn√©es actuelles du joueur depuis la base de donn√©es
            const data = await getDataFromPlayer(playerName);

            if (!arg || !arg[0] || arg.join('') === '') {
                // Si aucune commande n'est sp√©cifi√©e, on affiche la fiche du joueur
                if (data) {
                    // Utilisation de valeurs par d√©faut si certaines donn√©es sont manquantes
                    const ficheJoueur = `
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
*..........| SRPN PROFIL |..........*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üë§ ID :* ${data.s1 ?? 'ID inconnu'}  
> *‚ô®Ô∏è Statut :* ${data.s2 ?? 'Statut non d√©fini'}  
> *ü™Ä Mode :* ${data.s3 ?? 'Mode par d√©faut'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*..............| EXPLOITS |.............*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üßò‚Äç‚ôÇÔ∏è Rang :* ${data.s4 ?? '0'}/${data.s5 ?? '0'}/${data.s6 ?? '0'}  
- *ABM :* ${data.s4 ?? 'Aucun'}  
- *SPEED RUSH :* ${data.s5 ?? 'Aucun'}  
- *YU-GI-OH :* ${data.s6 ?? 'Aucun'}  
> *üèÜ Champion :* ${data.s7 ?? 'Aucun'}  
> *üòé Sp√©cialit√© :* ${data.s8 ?? 'Non sp√©cifi√©'}  
> *üëë Leader :* ${data.s9 ?? 'Non sp√©cifi√©'}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.s10 ?? 'Aucun'}  
> *üíØ L√©gende :* ${data.s11 ?? 'Inconnue'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*................| STATS |................*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üëä Battles :* ${data.s12 ?? '0'}  
- *V :* ${data.s13 ?? '0'} | *D :* ${data.s14 ?? '0'} | *L :* ${data.s15 ?? '0'}  
> *üèÖ TOP 3 :* ${data.s16 ?? '0'}  
> *üé≠ Story Mode :*  
- *M.W :* ${data.s17 ?? '0'} / *M.L :* ${data.s18 ?? '0'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*.........| HEROES GAME |.........*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üÄÑ Cards AMB :*  
- ${data.s19 ?? 'Aucune'}  
> *üöó Vehicles :*  
- ${data.s20 ?? 'Aucun'}  
> *üÉè Yu-Gi-Oh :*  
- ${data.s21 ?? 'Aucune carte'}  
> *ü™ê Origamy World :*  
- *üöª Skins :* ${data.s22 ?? 'Aucun'}  
- *üéí Items :* ${data.s23 ?? 'Aucun'}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*.............| CURRENCY |............*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üß≠ S Tokens :* ${data.s24 ?? '0'}üß≠  
> *üíé S Gemmes :* ${data.s25 ?? '0'}üíé  
> *üéüÔ∏è Coupons :* ${data.s26 ?? '0'}üéüÔ∏è  
> *üéÅ Box VIP :* ${data.s27 ?? '0'}üéÅ  
> *üìü Compteur :* ${data.s28 ?? '0'}FCFAüí∏  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
...........| *‚ôº Chargement...* |.........`;

                    // Envoyer la fiche du joueur
                    await zk.sendMessage(dest, ficheJoueur, { quoted: ms });
                } else {
                    repondre("üõÉ Aucune fiche trouv√©e pour ce joueur.");
                }
            } else {
                // Si l'utilisateur a fourni des arguments pour mettre √† jour les donn√©es
                if (!superUser) {
                    repondre("üõÇ R√©serv√© aux membres de la *DRPS*");
                } else {
                    // Parser la commande pour obtenir les modifications
                    const updates = arg.join(' ').split(';').reduce((acc, pair) => {
                        const [key, value] = pair.split(':');
                        if (key && value) {
                            acc[key.trim()] = value.trim();
                        }
                        return acc;
                    }, {});

                    // Appliquer les mises √† jour dans la base de donn√©es
                    for (const [key, value] of Object.entries(updates)) {
                        // Ajouter une logique sp√©cifique pour chaque colonne que tu veux mettre √† jour
                        await addOrUpdateDataInPlayer(playerName, key, value);
                    }

                    repondre('‚úîÔ∏è Donn√©es actualis√©es avec succ√®s');
                }
            }
        } catch (error) {
            console.log("Erreur lors du traitement de la commande : " + error);
            repondre("ü•µ Une erreur est survenue lors du traitement de votre commande. Veuillez r√©essayer plus tard.");
        }
    }
);