const { zokou } = require('../framework/zokou');

// Configuration des packs et des taux de loot
const packs = {
  "ü•â": { prix: 150, loot: { commun: 80, rare: 15, epique: 5 } },
  "ü•à": { prix: 200, loot: { commun: 60, rare: 30, epique: 10 } },
  "ü•á": { prix: 250, loot: { commun: 40, rare: 40, epique: 15, legendaire: 5 } },
  "üèÖ": { prix: 300, loot: { commun: 20, rare: 40, epique: 30, legendaire: 10 } }
};

// G√©n√©ration de loot al√©atoire
const genererLoot = (typePack) => {
  const lootTable = [];
  for (const [rarete, taux] of Object.entries(typePack.loot)) {
    lootTable.push(...Array(taux).fill(rarete));
  }
  return lootTable[Math.floor(Math.random() * lootTable.length)];
};

// üõí Commande /acheter
zokou(
  { nomCom: 'acheter', reaction: 'üõí', categorie: 'TRANSACT' },
  async (origineMessage, zk, commandeOptions) => {
    const { auteurMessage, repondre } = commandeOptions;
    try {
      // S√©lection du jeu
      await repondre("üìå Choisissez le jeu :\n1Ô∏è‚É£ ABM\n2Ô∏è‚É£ Speed Rush\n3Ô∏è‚É£ Yu-Gi-Oh\n4Ô∏è‚É£ Origamy World");
      const reponseJeu = await zk.awaitForMessage({ sender: auteurMessage, chatJid: origineMessage, timeout: 60000 });

      const jeux = ["ABM", "Speed Rush", "Yu-Gi-Oh Speed Duel", "Origamy World"];
      const choixJeu = jeux[parseInt(reponseJeu.message.conversation.trim(), 10) - 1];

      if (!choixJeu) return await repondre("‚ùå Jeu invalide.");

      // S√©lection du pack
      await repondre("üì¶ Choisissez votre pack :\nü•â (150üé´)\nü•à (200üé´)\nü•á (250üé´)\nüèÖ (300üé´)");
      const reponsePack = await zk.awaitForMessage({ sender: auteurMessage, chatJid: origineMessage, timeout: 60000 });

      const choixPack = Object.keys(packs).find(pack => pack === reponsePack.message.conversation.trim());
      if (!choixPack) return await repondre("‚ùå Pack invalide.");

      const packSelectionne = packs[choixPack];

      // V√©rification du solde (simulation)
      const soldeCoupons = 500;
      if (soldeCoupons < packSelectionne.prix) return await repondre("‚ùå Fonds insuffisants.");

      // G√©n√©ration du loot
      const lootObtenu = Array.from({ length: 3 }, () => genererLoot(packSelectionne));

      // Confirmation
      await repondre(`‚úÖ *Achat r√©ussi !* üéÅ\nPack *${choixJeu} ${choixPack}* ouvert :\n- ${lootObtenu.join("\n- ")}`);
    } catch (error) {
      console.error("Erreur lors de l'achat :", error);
      await repondre("‚ùå Une erreur est survenue.");
    }
  }
);

// üí∞ Commande /vendre
zokou(
  { nomCom: 'vendre', reaction: 'üí∞', categorie: 'TRANSACT' },
  async (origineMessage, zk, commandeOptions) => {
    const { args, repondre } = commandeOptions;
    if (args.length < 2) return await repondre("‚ùå Usage : /vendre [objet] [quantit√©]");

    const [objet, quantiteStr] = args;
    const quantite = parseInt(quantiteStr, 10);
    if (isNaN(quantite) || quantite <= 0) return await repondre("‚ùå Quantit√© invalide.");

    const prixUnitaire = 50; // Simulation du prix
    const totalGain = prixUnitaire * quantite;

    await repondre(`‚úÖ *Vente r√©ussie !*\nVous avez vendu ${quantite}x *${objet}* pour ${totalGain}ü™ô.`);
  }
);

// üîÑ Commande /√©changer
zokou(
  { nomCom: 'echanger', reaction: 'üîÑ', categorie: 'TRANSACT' },
  async (origineMessage, zk, commandeOptions) => {
    const { args, repondre } = commandeOptions;
    if (args.length < 2) return await repondre("‚ùå Usage : /echanger [montant] [type]");

    const [montantStr, type] = args;
    const montant = parseInt(montantStr, 10);
    if (isNaN(montant) || montant <= 0) return await repondre("‚ùå Montant invalide.");

    const taux = 0.9;
    const montantFinal = Math.floor(montant * taux);

    await repondre(`‚úÖ *√âchange effectu√© !*\n${montant} ${type} ‚Üí ${montantFinal} convertis apr√®s taxe.`);
  }
);

// üé´ Commande /coupons
zokou(
  { nomCom: 'coupons', reaction: 'üé´', categorie: 'TRANSACT' },
  async (origineMessage, zk, commandeOptions) => {
    const { args, repondre } = commandeOptions;
    if (args.length < 2) return await repondre("‚ùå Usage : /coupons [montant] [monnaie]");

    const [montantStr, monnaie] = args;
    const montant = parseInt(montantStr, 10);
    if (isNaN(montant) || montant <= 0) return await repondre("‚ùå Montant invalide.");

    const taux = monnaie === "ü™ô" ? 0.01 : 0.1;
    const couponsObtenus = montant * taux;

    await repondre(`‚úÖ *Conversion r√©ussie !*\n${montant}${monnaie} ‚Üí ${couponsObtenus}üé´.`);
  }
);

// üé∞ Commande /casino
zokou(
  { nomCom: 'casino', reaction: 'üé∞', categorie: 'TRANSACT' },
  async (origineMessage, zk, commandeOptions) => {
    const { args, repondre } = commandeOptions;
    if (args.length < 2) return await repondre("‚ùå Usage : /casino [jeu] [mise]");

    const [jeu, miseStr] = args;
    const mise = parseInt(miseStr, 10);
    if (isNaN(mise) || mise <= 0) return await repondre("‚ùå Mise invalide.");

    const gain = Math.random() < 0.5 ? mise * 2 : 0;
    await repondre(`üé≤ *R√©sultat du Casino (${jeu})*\nMise : ${mise}ü™ô\n${gain > 0 ? `Gagn√© : ${gain}ü™ô` : "Perdu !"}`);
  }
);