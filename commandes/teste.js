const { zokou } = require('../framework/zokou');
const { insertPlayerProfile, getPlayerProfile, updatePlayerProfile } = require('../bdd/player_bdd');

const playerProfiles = {
  'john': { 
    nomCom: 'john',
    playerName: 'John Supremus',
    imageUrl: 'https://i.ibb.co/5hPBn1j3/Image-2025-04-02-13-55-06-1.jpg'
  }
};


function formatProfileMessage(data) {
  return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üë§ Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üßë‚Äçüßë‚Äçüßí‚Äçüßí DIVISION :* ${data.division}
> *üßò‚Äç‚ôÇÔ∏è RANG :*  
> - *ABM :* ${data.rang_abm}  
> - *SPEED RUSH :* ${data.rang_speed_rush}  
> - *YU-GI-OH :* ${data.rang_yugioh}  
> *üèÜ Champion :* ${data.champion}  
> *üòé Sp√©cialit√© :* ${data.specialite}  
> *üëë Leader :* ${data.leader}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.defis_remportes}  
> *üíØ L√©gende :* ${data.legende}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires} | D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖ TOP 3 :* 00${data.top3}  
> *üé≠ Story Mode :* 
> M.W : 00${data.missions_reussies} / M.L : 00${data.missions_echouees}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÄÑ Cards ABM :* ${data.abm_cards}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *ü™ê Origamy Skins :*  
> - *üöª Skins :* ${data.skins}  
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
> *üéÅ Box VIP :* 0${data.box_vip}üéÅ
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
}

for (const nomCom in playerProfiles) {
  zokou(
    {
      nomCom: nomCom,
      categorie: 'PLAYER-PROFIL'
    },
    async (dest, zk, commandeOptions) => {
      const { ms, repondre, arg, superUser } = commandeOptions;
      const profile = playerProfiles[nomCom];
      const playerName = profile.playerName;
      const imageUrl = profile.imageUrl;

      try {
        let data = await getPlayerProfile(playerName);

        if (!data) {
          await insertPlayerProfile(playerName);
          data = await getPlayerProfile(playerName);
          repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
        }

        if (!arg || arg.length === 0) {
          try {
            await zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
          } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
            zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms });
          }
        } else if (superUser) {
          let updates = {};
          let fields = arg.join(' ').split(';');
          let changes = [];

          fields.forEach(fieldPair => {
            let [field, rawValue] = fieldPair.split('=').map(item => item.trim());
            if (!field || rawValue === undefined) return;

            const oldValue = data[field];
            let newValue = oldValue;

            if (!isNaN(oldValue)) {
              // Gestion des champs num√©riques
              if (rawValue.startsWith('+')) {
                newValue = oldValue + Number(rawValue.slice(1));
              } else if (rawValue.startsWith('-')) {
                newValue = oldValue - Number(rawValue.slice(1));
              } else if (rawValue.startsWith('=')) {
                newValue = Number(rawValue.slice(1));
              } else {
                newValue = Number(rawValue);
              }
            } else {
              // Gestion des champs texte
              if (rawValue.startsWith('+')) {
                const addText = rawValue.slice(1).trim();
                const existingList = oldValue ? oldValue.split(',').map(s => s.trim()) : [];
                if (!existingList.includes(addText)) {
                  existingList.push(addText);
                  newValue = existingList.join(', ');
                }
              } else if (rawValue.startsWith('-')) {
                const removeText = rawValue.slice(1).trim();
                const existingList = oldValue ? oldValue.split(',').map(s => s.trim()) : [];
                const filteredList = existingList.filter(item => item !== removeText);
                newValue = filteredList.join(', ');
              } else if (rawValue.startsWith('=')) {
                newValue = rawValue.slice(1).trim();
              } else {
                newValue = rawValue.trim();
              }
            }

            if (newValue !== oldValue) {
              updates[field] = newValue;
              changes.push(`*${field}* : ${oldValue} -> ${newValue}`);
            }
          });

          if (Object.keys(updates).length > 0) {
            await updatePlayerProfile(playerName, updates);
            data = await getPlayerProfile(playerName);
            let confirmationMessage = `Mise √† jour du profil de ${playerName}:\n${changes.join('\n')}`;
            repondre(confirmationMessage);
          } else {
            repondre('Aucune modification d√©tect√©e.');
          }
        }
      } catch (error) {
        console.error("Erreur lors du traitement de la commande :", error);
        repondre('Une erreur est survenue lors du traitement de la commande.');
      }
    }
  );
};