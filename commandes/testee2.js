const { zokou } = require('../framework/zokou');
const util = require('util');
const fs = require('fs-extra');
const { zokou } = require(__dirname + "/../framework/zokou");
const { format } = require(__dirname + "/../framework/mesfonctions");
const os = require("os");
const moment = require("moment-timezone");
const s = require(__dirname + "/../set");
const { default: axios } = require('axios');

zokou(
    {
        nomCom: 'quiz',
        categorie: 'Transact-Zone'
    },
    async (dest, zk, commandeOptions) => {
        const { repondre, arg, ms } = commandeOptions;
        let niveau = 1;
        let score = 0;

        const questions = [
            // Niveau Facile
            {
                niveau: 1,
                question: "‚ú® Quel est le nom du colis√©e √† Astoria dans Origamy World ?",
                options: ["A) Lorn", "B) Aurelus", "C) Aurelius"],
                reponse: "B"
            },
            {
                niveau: 1,
                question: "‚ú® La CRPS est dirig√©e par ?",
                options: ["A) Supremus-Prod", "B) John Supremus", "C) Team Supremus"],
                reponse: "A"
            },
            {
                niveau: 1,
                question: "‚ú® Quel est le but principal du jeu CRPS ?",
                options: ["A) Cr√©er le meilleur RP jamais connu.", "B) Recruter et former des r√¥listes.", "C) Cr√©ation d'un RP Multivers r√©aliste."],
                reponse: "C"
            },
            // Niveau Normal
            {
                niveau: 2,
                question: "‚ú® Quelle est le nom du Dieu ou D√©esse de Asura dans Origamy World ?",
                options: ["A) Zeleph", "B) Selenia", "C) Iris"],
                reponse: "C"
            },
            {
                niveau: 2,
                question: "‚ú® Lequel de ces actions est une action simultan√©e √† une autre ?",
                options: ["A) Je lui donne un crochet du droit √† la t√™te en lui donnant un coup de pied gauche √† son genou droit.",
                         "B) J'effectue un saut avant de 2m de haut t√™te en bas en lui saisissant la t√™te avec les deux mains.",
                         "C) Il n'y en a pas."],
                reponse: "B"
            },
            {
                niveau: 2,
                question: "‚ú® Quel est la version du syst√®me de confrontation actuel de CRPS ?",
                options: ["A) CRPS FIGHT RULE 3.0.0", "B) CRPS NEW ERA", "C) CRPS FIGHT RULE UPDATE"],
                reponse: "A"
            },
            // Niveau Difficile
            {
                niveau: 3,
                question: "‚ú® √Ä quelle temp√©rature la sant√© est-elle affect√©e en raison du froid dans Origamy World ?",
                options: ["A) -30¬∞C", "B) -40¬∞C", "C) -20¬∞C"],
                reponse: "A"
            },
            {
                niveau: 3,
                question: "‚ú® Dans un combat opposant J1 √† J2, Section1: une offensive de J1 effectuant une course de 5m/s vers J2 √† 5m qui lui lib√®re son √©nergie. Section2: J1 donne un crochet droit √† la t√™te de J2 qui lui active sa technique... Quel sera le verdict ?",
                options: ["A) J1 touchera J2 avant l'activation de la technique.",
                         "B) J2 activera sa technique avant le coup de J1.",
                         "C) Consulter les stats vitesse de J1 et J2 avant de donner un verdict."],
                reponse: "C"
            },
            {
                niveau: 3,
                question: "‚ú® Quelle est la date de cr√©ation de CRPS NEW ERA ?",
                options: ["A) 01/07/2023", "B) 11/11/2023", "C) 17/06/2024"],
                reponse: "B"
            },
            // Question Bonus
            {
                niveau: "bonus",
                question: "‚ú® Quel est le surnom de John Supremus ?",
                options: ["A) Le renard", "B) Natsuki", "C) Supremus"],
                reponse: "A"
            }
        ];

        let currentLevelQuestions = questions.filter(q => q.niveau === niveau);
        
        while (niveau <= 3) {
            let correctAnswers = 0;
            for (let q of currentLevelQuestions) {
                await zk.sendMessage(dest, { text: `${q.question}\n${q.options.join("\n")}` }, { quoted: ms });

                const userAnswer = await getUserAnswerWithTimeout(30); // 30 secondes pour r√©pondre

                if (userAnswer && userAnswer.toUpperCase() === q.reponse) {
                    correctAnswers++;
                } else {
                    repondre("‚ú® Mauvaise r√©ponse ou d√©lai d√©pass√©, tu perds tout. üòî");
                    score = 0;
                    return;
                }
            }

            if (correctAnswers === currentLevelQuestions.length) {
                let reward = 0;
                if (niveau === 1) reward = 1500;
                if (niveau === 2) reward = 3000;
                if (niveau === 3) reward = 5000;

                score += reward;
                repondre(`‚ú®üéâ Bravo ! Tu as termin√© le niveau ${niveau} et gagn√© ${reward}üíé. Ton score actuel est de ${score}üíé.`);

                if (niveau === 3) {
                    repondre(`‚ú®ü§© Tu as termin√© tous les niveaux ! Tu peux tenter la question bonus pour 10,000üíé ou encaisser tes gains.`);
                    break;
                } else {
                    repondre(`‚ú®üôã Veux-tu continuer ou r√©clamer tes gains ? R√©ponds par "Continuer" ou "R√©clamer".`);
                    const continuer = await getUserDecisionWithTimeout(30); // 30 secondes pour d√©cider
                    if (!continuer) {
                        repondre(`‚ú®üòÇ Tu as d√©cid√© d'encaisser tes gains. Ton score final est de ${score}üíé.`);
                        return;
                    }
                }
                niveau++;
                currentLevelQuestions = questions.filter(q => q.niveau === niveau);
            }
        }

        // Question Bonus
        if (niveau === 3) {
            const bonusQuestion = questions.find(q => q.niveau === "bonus");
            await zk.sendMessage(dest, { text: `${bonusQuestion.question}\n${bonusQuestion.options.join("\n")}` }, { quoted: ms });

            const userAnswer = await getUserAnswerWithTimeout(30);
            if (userAnswer && userAnswer.toUpperCase() === bonusQuestion.reponse) {
                score += 10000;
                repondre(`‚ú®üéä Incroyable ! Tu as gagn√© la question bonus et empoches un total de ${score}üíé !`);
            } else {
                repondre("‚ú® Mauvaise r√©ponse √† la question bonus ou d√©lai d√©pass√©, tu perds tout. üòî");
                score = 0;
            }
        }

        repondre(`‚ú®üôÇ Quiz termin√© ! Ton score final est de ${score}üíé.`);
    }
);

// Fonction pour obtenir la r√©ponse du joueur avec un d√©lai
async function getUserAnswerWithTimeout(timeoutSeconds) {
    return new Promise((resolve) => {
        let answered = false;

        // √âcoute le message du joueur
        zk.onMessage(async (message) => {
            if (!answered) {
                answered = true;
                resolve(message.body.trim().toUpperCase());
            }
        });

        // Timer de 30 secondes
        setTimeout(() => {
            if (!answered) {
                resolve(null); // Le d√©lai est √©coul√© sans r√©ponse
            }
        }, timeoutSeconds * 1000);
    });
}

// Fonction pour obtenir la d√©cision du joueur avec un d√©lai
async function getUserDecisionWithTimeout(timeoutSeconds) {
    return new Promise((resolve) => {
        let decided = false;

        // √âcoute la d√©cision du joueur
        zk.onMessage(async (message) => {
            if (!decided) {
                const decision = message.body.trim().toUpperCase();
                if (decision === 'CONTINUER') {
                    decided = true;
                    resolve(true);
                } else if (decision === 'R√âCLAMER') {
                    decided = true;
                    resolve(false);
                }
            }
        });

        // Timer de 30 secondes
        setTimeout(() => {
            if (!decided) {
                resolve(false); // Par d√©faut, r√©clamer si le d√©lai est √©coul√©
            }
        }, timeoutSeconds * 1000);
    });
                                     }
