const { zokou } = require('../framework/zokou');
const { insertPlayerProfile, getPlayerProfile, updatePlayerProfile } = require('../bdd/player_bdd');

zokou(
  {
    nomCom: 'john',
    categorie: 'PLAYER-PROFIL'
  },
  async (dest, zk, commandeOptions) => {
    const { ms, repondre, arg, superUser } = commandeOptions;

    // Fonction pour formater le message de profil du joueur
    function formatProfileMessage(data) {
      return `‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
*..........| SRPN PROFIL |..........*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üë§ Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*..............| EXPLOITS |.............*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üßò‚Äç‚ôÇÔ∏è Rang :*  
- *ABM :* ${data.rang_abm}  
- *SPEED RUSH :* ${data.rang_speed_rush}  
- *YU-GI-OH :* ${data.rang_yugioh}  
> *üèÜ Champion :* ${data.champion}  
> *üòé Sp√©cialit√© :* ${data.specialite}  
> *üëë Leader :* ${data.leader}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.defis_remportes}  
> *üíØ L√©gende :* ${data.legende}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*................| STATS |................*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üëä Battles :* 
> V : ${data.victoires} | D : ${data.defaites} | L : ${data.forfaits}   
> *üèÖ TOP 3 :* ${data.top3}  
> *üé≠ Story Mode :* M.W : ${data.missions_reussies} / M.L : ${data.missions_echouees}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*.........| HEROES GAME |.........*  
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üÄÑ Cards AMB :* ${data.amb_cards}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *ü™ê Origamy Skins :*  
- *üöª Skins :* ${data.skins}  
- *üéí Items :* ${data.items}  
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  
*.............| CURRENCY |............* 
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê 
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
> *üéÅ Box VIP :* ${data.box_vip}üéÅ
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 
*.............| COMPTE |..............*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí`;
    }

    try {
      const playerName = 'john';  // Par d√©faut, "john"

      // R√©cup√©ration des donn√©es du joueur
      let data = await getPlayerProfile(playerName);

      // Si les donn√©es du joueur n'existent pas, cr√©er un nouveau profil
      if (!data) {
        await insertPlayerProfile(playerName);
        data = await getPlayerProfile(playerName);
        repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
      }

      if (!arg || arg.length === 0) {
        // Si aucun argument n'est fourni, afficher le profil du joueur
        const imageUrl = 'https://i.ibb.co/3mp1zty/image.jpg';
        try {
          await fetch(imageUrl); // V√©rifier que l'image est accessible
          zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
        } catch (error) {
          console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
          zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms }); // Envoyer uniquement le texte
        }
      } else if (superUser) {
        // Logique de mise √† jour multiple
        let updates = {};
        let fields = arg.join(' ').split(';'); // S√©parer par points-virgules

        fields.forEach(fieldPair => {
          let [field, value] = fieldPair.split('=').map(item => item.trim()); // S√©parer par `=` et retirer les espaces
          if (field && value) {
            updates[field] = !isNaN(parseFloat(value)) && isFinite(value) ? Number(value) : value; // Convertir en nombre si possible
          }
        });

        if (Object.keys(updates).length > 0) {
          try {
            await updatePlayerProfile(playerName, updates); // Mise √† jour multiple
            repondre(`La fiche du joueur ${playerName} a √©t√© mise √† jour avec succ√®s.`);
          } catch (error) {
            console.error("Erreur lors de la mise √† jour du profil :", error);
            repondre("Une erreur est survenue lors de la mise √† jour du profil.");
          }
        } else {
          repondre("Aucun champ valide trouv√© pour la mise √† jour.");
        }
      } else {
        repondre("Vous n'avez pas les permissions pour modifier cette fiche.");
      }
    } catch (error) {
      console.error("Erreur:", error);
      repondre('Une erreur est survenue. Veuillez r√©essayer.');
    }
  }
);

module.exports = {
  insertPlayerProfile,
  getPlayerProfile,
  updatePlayerProfile
};