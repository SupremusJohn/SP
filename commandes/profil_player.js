const { zokou } = require('../framework/zokou');
const { insertPlayerProfile, getPlayerProfile, updatePlayerProfile } = require('../bdd/player_bdd');



zokou(
  {
    nomCom: 'john',
    categorie: 'PLAYER-PROFIL'
  },
  async (dest, zk, commandeOptions) => {
    const { ms, repondre, arg, superUser } = commandeOptions;

    function formatProfileMessage(data) {
      return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üë§ Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üßò‚Äç‚ôÇÔ∏è RANG :*  
> - *ABM :* ${data.rang_abm}  
> - *SPEED RUSH :* ${data.rang_speed_rush}  
> - *YU-GI-OH :* ${data.rang_yugioh}  
> *üèÜ Champion :* ${data.champion}  
> *üòé Sp√©cialit√© :* ${data.specialite}  
> *üëë Leader :* ${data.leader}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.defis_remportes}  
> *üíØ L√©gende :* ${data.legende}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires}
> D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖ TOP 3 :* 00${data.top3}  
> *üé≠ Story Mode :* 
> M.W : 00${data.missions_reussies} / M.L : 00${data.missions_echouees}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÄÑ Cards AMB :* ${data.amb_cards}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *ü™ê Origamy Skins :*  
> - *üöª Skins :* ${data.skins}  
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
> *üéÅ Box VIP :* 0${data.box_vip}üéÅ
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
    }

    try {
      const playerName = 'John Supremus';

      let data = await getPlayerProfile(playerName);

      if (!data) {
        await insertPlayerProfile(playerName);
        data = await getPlayerProfile(playerName);
        repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
      }

      if (!arg || arg.length === 0) {
        const imageUrl = 'https://i.ibb.co/3mp1zty/image.jpg';
        try {
          await fetch(imageUrl);
          zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
        } catch (error) {
          console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
          zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms });
        }
      } else if (superUser) {
        let updates = {};
        let fields = arg.join(' ').split(';');
        let changes = [];
        let invalidFields = [];

        fields.forEach(fieldPair => {
          let [field, value] = fieldPair.split('=').map(item => item.trim());
          if (field && value) {
            const newValue = isNaN(value) ? value : Number(value);

            // V√©rification si le champ existe dans la fiche actuelle
            if (Object.keys(data).includes(field)) {
              const oldValue = data[field] !== undefined ? data[field] : 'Non d√©fini';

              if (oldValue !== newValue) {
                changes.push(`- *${field}* : ${oldValue} -> ${newValue}`);
                updates[field] = newValue;
              }
            } else {
              invalidFields.push(field);
            }
          }
        });

        if (invalidFields.length > 0) {
          repondre(`‚õî Champs invalides d√©tect√©s : ${invalidFields.join(', ')}.\nVeuillez v√©rifier la syntaxe et r√©essayer.`);
        }

        if (Object.keys(updates).length > 0) {
          await updatePlayerProfile(playerName, updates);
          let changeMessage = `‚úÖ La fiche du joueur *${playerName}* a √©t√© mise √† jour avec succ√®s :\n\n${changes.join('\n')}`;
          repondre(changeMessage);
        } else if (invalidFields.length === 0) {
          repondre("‚ö†Ô∏è Aucun champ valide n'a √©t√© trouv√© pour la mise √† jour.");
        }
      } else {
        repondre("‚õî Vous n'avez pas les permissions pour modifier cette fiche.");
      }
    } catch (error) {
      console.error("Erreur:", error);
      repondre('‚ùå Une erreur est survenue. Veuillez r√©essayer.');
    }
  }
);


zokou(
  {
    nomCom: 'tenno',
    categorie: 'PLAYER-PROFIL'
  },
  async (dest, zk, commandeOptions) => {
    const { ms, repondre, arg, superUser } = commandeOptions;

    // Fonction pour formater le message de profil du joueur
    function formatProfileMessage(data) {
      return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üë§ Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üßò‚Äç‚ôÇÔ∏è RANG :*  
> - *ABM :* ${data.rang_abm}  
> - *SPEED RUSH :* ${data.rang_speed_rush}  
> - *YU-GI-OH :* ${data.rang_yugioh}  
> *üèÜ Champion :* ${data.champion}  
> *üòé Sp√©cialit√© :* ${data.specialite}  
> *üëë Leader :* ${data.leader}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.defis_remportes}  
> *üíØ L√©gende :* ${data.legende}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires}
> D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖ TOP 3 :* 00${data.top3}  
> *üé≠ Story Mode :* 
> M.W : 00${data.missions_reussies} / M.L : 00${data.missions_echouees}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÄÑ Cards AMB :* ${data.amb_cards}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *ü™ê Origamy Skins :*  
> - *üöª Skins :* ${data.skins}  
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
> *üéÅ Box VIP :* 0${data.box_vip}üéÅ
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
    }

    try {
      const playerName = 'Tƒônn√µ S≈©prƒôm≈©s';

      let data = await getPlayerProfile(playerName);

      if (!data) {
        await insertPlayerProfile(playerName);
        data = await getPlayerProfile(playerName);
        repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
      }

      if (!arg || arg.length === 0) {
        const imageUrl = 'https://i.ibb.co/yMQbMrn/image.jpg';
        try {
          await fetch(imageUrl);
          zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
        } catch (error) {
          console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
          zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms });
        }
      } else if (superUser) {
        let updates = {};
        let fields = arg.join(' ').split(';');
        let changes = [];

        fields.forEach(fieldPair => {
          let [field, value] = fieldPair.split('=').map(item => item.trim());
          if (field && value) {
            const newValue = isNaN(value) ? value : Number(value);
            const oldValue = data[field] !== undefined ? data[field] : 'Non d√©fini';

            if (oldValue !== newValue) {
              changes.push(`- *${field}* : ${oldValue} -> ${newValue}`);
              updates[field] = newValue;
            }
          }
        });

        if (Object.keys(updates).length > 0) {
          await updatePlayerProfile(playerName, updates);
          let changeMessage = `La fiche du joueur *${playerName}* a √©t√© mise √† jour avec succ√®s :\n\n${changes.join('\n')}`;
          repondre(changeMessage);
        } else {
          repondre("Aucun champ valide trouv√© pour la mise √† jour.");
        }
      } else {
        repondre("Vous n'avez pas les permissions pour modifier cette fiche.");
      }
    } catch (error) {
      console.error("Erreur:", error);
      repondre('Une erreur est survenue. Veuillez r√©essayer.');
    }
  }
);

zokou(
  {
    nomCom: 'nelliel',
    categorie: 'PLAYER-PROFIL'
  },
  async (dest, zk, commandeOptions) => {
    const { ms, repondre, arg, superUser } = commandeOptions;

    // Fonction pour formater le message de profil du joueur
    function formatProfileMessage(data) {
      return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üë§ Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üßò‚Äç‚ôÇÔ∏è RANG :*  
> - *ABM :* ${data.rang_abm}  
> - *SPEED RUSH :* ${data.rang_speed_rush}  
> - *YU-GI-OH :* ${data.rang_yugioh}  
> *üèÜ Champion :* ${data.champion}  
> *üòé Sp√©cialit√© :* ${data.specialite}  
> *üëë Leader :* ${data.leader}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.defis_remportes}  
> *üíØ L√©gende :* ${data.legende}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires}
> D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖ TOP 3 :* 00${data.top3}  
> *üé≠ Story Mode :* 
> M.W : 00${data.missions_reussies} / M.L : 00${data.missions_echouees}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÄÑ Cards AMB :* ${data.amb_cards}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *ü™ê Origamy Skins :*  
> - *üöª Skins :* ${data.skins}  
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
> *üéÅ Box VIP :* 0${data.box_vip}üéÅ
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
    }

    try {
      const playerName = 'Nelliel Volfir';

      let data = await getPlayerProfile(playerName);

      if (!data) {
        await insertPlayerProfile(playerName);
        data = await getPlayerProfile(playerName);
        repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
      }

      if (!arg || arg.length === 0) {
        const imageUrl = 'https://i.ibb.co/MkKtgK58/image.jpg';
        try {
          await fetch(imageUrl);
          zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
        } catch (error) {
          console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
          zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms });
        }
      } else if (superUser) {
        let updates = {};
        let fields = arg.join(' ').split(';');
        let changes = [];

        fields.forEach(fieldPair => {
          let [field, value] = fieldPair.split('=').map(item => item.trim());
          if (field && value) {
            const newValue = isNaN(value) ? value : Number(value);
            const oldValue = data[field] !== undefined ? data[field] : 'Non d√©fini';

            if (oldValue !== newValue) {
              changes.push(`- *${field}* : ${oldValue} -> ${newValue}`);
              updates[field] = newValue;
            }
          }
        });

        if (Object.keys(updates).length > 0) {
          await updatePlayerProfile(playerName, updates);
          let changeMessage = `La fiche du joueur *${playerName}* a √©t√© mise √† jour avec succ√®s :\n\n${changes.join('\n')}`;
          repondre(changeMessage);
        } else {
          repondre("Aucun champ valide trouv√© pour la mise √† jour.");
        }
      } else {
        repondre("Vous n'avez pas les permissions pour modifier cette fiche.");
      }
    } catch (error) {
      console.error("Erreur:", error);
      repondre('Une erreur est survenue. Veuillez r√©essayer.');
    }
  }
);

zokou(
  {
    nomCom: 'louis',
    categorie: 'PLAYER-PROFIL'
  },
  async (dest, zk, commandeOptions) => {
    const { ms, repondre, arg, superUser } = commandeOptions;

    // Fonction pour formater le message de profil du joueur
    function formatProfileMessage(data) {
      return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üë§ Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üßò‚Äç‚ôÇÔ∏è RANG :*  
> - *ABM :* ${data.rang_abm}  
> - *SPEED RUSH :* ${data.rang_speed_rush}  
> - *YU-GI-OH :* ${data.rang_yugioh}  
> *üèÜ Champion :* ${data.champion}  
> *üòé Sp√©cialit√© :* ${data.specialite}  
> *üëë Leader :* ${data.leader}  
> *ü§º‚Äç‚ôÇÔ∏è Challenge :* ${data.defis_remportes}  
> *üíØ L√©gende :* ${data.legende}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires}
> D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖ TOP 3 :* 00${data.top3}  
> *üé≠ Story Mode :* 
> M.W : 00${data.missions_reussies} / M.L : 00${data.missions_echouees}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÄÑ Cards AMB :* ${data.amb_cards}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *ü™ê Origamy Skins :*  
> - *üöª Skins :* ${data.skins}  
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
> *üéÅ Box VIP :* 0${data.box_vip}üéÅ
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
    }

    try {
      const playerName = 'Lone Ink Louis';

      let data = await getPlayerProfile(playerName);

      if (!data) {
        await insertPlayerProfile(playerName);
        data = await getPlayerProfile(playerName);
        repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
      }

      if (!arg || arg.length === 0) {
        const imageUrl = 'https://i.ibb.co/xt637n06/image.jpg';
        try {
          await fetch(imageUrl);
          zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
        } catch (error) {
          console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
          zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms });
        }
      } else if (superUser) {
        let updates = {};
        let fields = arg.join(' ').split(';');
        let changes = [];

        fields.forEach(fieldPair => {
          let [field, value] = fieldPair.split('=').map(item => item.trim());
          if (field && value) {
            const newValue = isNaN(value) ? value : Number(value);
            const oldValue = data[field] !== undefined ? data[field] : 'Non d√©fini';

            if (oldValue !== newValue) {
              changes.push(`- *${field}* : ${oldValue} -> ${newValue}`);
              updates[field] = newValue;
            }
          }
        });

        if (Object.keys(updates).length > 0) {
          await updatePlayerProfile(playerName, updates);
          let changeMessage = `La fiche du joueur *${playerName}* a √©t√© mise √† jour avec succ√®s :\n\n${changes.join('\n')}`;
          repondre(changeMessage);
        } else {
          repondre("Aucun champ valide trouv√© pour la mise √† jour.");
        }
      } else {
        repondre("Vous n'avez pas les permissions pour modifier cette fiche.");
      }
    } catch (error) {
      console.error("Erreur:", error);
      repondre('Une erreur est survenue. Veuillez r√©essayer.');
    }
  }
);